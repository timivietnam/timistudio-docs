"use strict";(self.webpackChunktimistudio_docs=self.webpackChunktimistudio_docs||[]).push([[6761],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=s(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||c;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<c;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},658:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),i=["components"],a={sidebar_position:2},l="Customization",s={unversionedId:"doctorplus-doctor/customization",id:"doctorplus-doctor/customization",title:"Customization",description:"1. Colors",source:"@site/docs/doctorplus-doctor/customization.md",sourceDirName:"doctorplus-doctor",slug:"/doctorplus-doctor/customization",permalink:"/docs/doctorplus-doctor/customization",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/doctorplus-doctor/introduction"},next:{title:"Doctor Plus - Doctor (React Native)",permalink:"/docs/doctorplus-doctor/react-native-environment-setup"}},u=[{value:"1. Colors",id:"1-colors",children:[],level:2},{value:"2. Theme Variables",id:"2-theme-variables",children:[{value:"Declare Custom Component",id:"declare-custom-component",children:[],level:3}],level:2}],p={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"customization"},"Customization"),(0,c.kt)("h2",{id:"1-colors"},"1. Colors"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"src/configs/Colors.ts")),(0,c.kt)("p",null,"Add or edit the colors you want"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"},"const Colors = {\n  white: '#FFFFFF',\n  black: '#000000',\n};\n\nexport default Colors;\n")),(0,c.kt)("h2",{id:"2-theme-variables"},"2. Theme Variables"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"src/configs/Theme.ts")),(0,c.kt)("p",null,"This allows you to easily create themed components by using theme variables"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"},"export interface ITheme {\n  background: ColorValue | string;\n  text: ColorValue | string;\n}\n\nexport const themes = {\n  dark: {\n    background: Colors.black,\n    text: Colors.white,\n  },\n  light: {\n    background: Colors.white,\n    text: Colors.black,\n  },\n};\n")),(0,c.kt)("h3",{id:"declare-custom-component"},"Declare Custom Component"),(0,c.kt)("p",null,"Let's declare a View and set it backgroundColor to any color of current theme."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"},"import React from 'react';\nimport {View} from 'react-native';\nimport {useTheme} from 'configs/Theme';\n\ninterface AwesomeViewProps {}\n\nconst AwesomeView = ({...rest}: AwesomeViewProps) => {\n  const {theme} = useTheme();\n\n  return <View {...rest} style={[{backgroundColor: theme.background}]} />;\n};\n\nexport default AwesomeView;\n\n")))}m.isMDXComponent=!0}}]);