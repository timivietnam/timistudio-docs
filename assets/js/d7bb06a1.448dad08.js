"use strict";(self.webpackChunktimistudio_docs=self.webpackChunktimistudio_docs||[]).push([[8344],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},286:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],c={sidebar_position:2},l="Customization",s={unversionedId:"doctorplus-patient/customization",id:"doctorplus-patient/customization",title:"Customization",description:"1. Colors",source:"@site/docs/doctorplus-patient/customization.md",sourceDirName:"doctorplus-patient",slug:"/doctorplus-patient/customization",permalink:"/docs/doctorplus-patient/customization",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/doctorplus-patient/introduction"},next:{title:"Doctor Plus - Patient (React Native)",permalink:"/docs/doctorplus-patient/react-native-environment-setup"}},u=[{value:"1. Colors",id:"1-colors",children:[],level:2},{value:"2. Theme Variables",id:"2-theme-variables",children:[{value:"Declare Custom Component",id:"declare-custom-component",children:[],level:3}],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"customization"},"Customization"),(0,i.kt)("h2",{id:"1-colors"},"1. Colors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"src/configs/Colors.ts")),(0,i.kt)("p",null,"Add or edit the colors you want"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"const Colors = {\n  white: '#FFFFFF',\n  black: '#000000',\n};\n\nexport default Colors;\n")),(0,i.kt)("h2",{id:"2-theme-variables"},"2. Theme Variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"src/configs/Theme.ts")),(0,i.kt)("p",null,"This allows you to easily create themed components by using theme variables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"export interface ITheme {\n  background: ColorValue | string;\n  text: ColorValue | string;\n}\n\nexport const themes = {\n  dark: {\n    background: Colors.black,\n    text: Colors.white,\n  },\n  light: {\n    background: Colors.white,\n    text: Colors.black,\n  },\n};\n")),(0,i.kt)("h3",{id:"declare-custom-component"},"Declare Custom Component"),(0,i.kt)("p",null,"Let's declare a View and set it backgroundColor to any color of current theme."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"import React from 'react';\nimport {View} from 'react-native';\nimport {useTheme} from 'configs/Theme';\n\ninterface AwesomeViewProps {}\n\nconst AwesomeView = ({...rest}: AwesomeViewProps) => {\n  const {theme} = useTheme();\n\n  return <View {...rest} style={[{backgroundColor: theme.background}]} />;\n};\n\nexport default AwesomeView;\n\n")))}m.isMDXComponent=!0}}]);